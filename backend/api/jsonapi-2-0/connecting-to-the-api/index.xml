<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Access &amp; Authentication on Digital Concert Hall Design System</title>
    <link>/backend/api/jsonapi-2-0/connecting-to-the-api/</link>
    <description>Recent content in Access &amp; Authentication on Digital Concert Hall Design System</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/backend/api/jsonapi-2-0/connecting-to-the-api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OAuth2(-ish)</title>
      <link>/backend/api/jsonapi-2-0/connecting-to-the-api/oauth2-ish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/backend/api/jsonapi-2-0/connecting-to-the-api/oauth2-ish/</guid>
      <description>Access tokens OAuth secured calls require a set authorization header with an API 2.0 access token. These calls are marked with in the documentation.
An access token can be one for an anonymous user or one for a logged in user. These tokens come in the form of a JWT (see https://jwt.io/).
The concept of expiring access tokens and retrieving new access tokens with a refresh token is not fully implemented yet and won&amp;rsquo;t be available for some time after the initial launch of API 2.</description>
    </item>
    
    <item>
      <title>Establishing an Initial Session</title>
      <link>/backend/api/jsonapi-2-0/connecting-to-the-api/establishing-an-initial-session/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/backend/api/jsonapi-2-0/connecting-to-the-api/establishing-an-initial-session/</guid>
      <description>If the client has no access token or an invalid one, it has to establish an initial session to retrieve one. The initial retrieved access token will always be an anonymous one until it has been authenticated via either a password grant, a connect process on the website following a pin grant, or a registration process using the API (currently only 1.2). The access token must be stored on the device.</description>
    </item>
    
    <item>
      <title>Authenticating with username and password</title>
      <link>/backend/api/jsonapi-2-0/connecting-to-the-api/authenticating-with-username-and-password/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/backend/api/jsonapi-2-0/connecting-to-the-api/authenticating-with-username-and-password/</guid>
      <description>Provides a user login. The sent access token is the anonymous one the client retrieved when establishing the initial session. The received access token in this response MUST be stored on the device as this is the access token that is connected to the user.
Note: Anonymous access tokens MAY being recycled so that the one that is connected to a user will be the same as the former anonymous one.</description>
    </item>
    
    <item>
      <title>Authenticating using a PIN</title>
      <link>/backend/api/jsonapi-2-0/connecting-to-the-api/authenticating-using-a-pin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/backend/api/jsonapi-2-0/connecting-to-the-api/authenticating-using-a-pin/</guid>
      <description>Provides a user login or registration via PIN connect process.
Endpoint: &amp;gt; /oauth2/token
HTTP request header: &amp;gt; Content-Type : application/x-www-form-urlencoded
&amp;gt; Authorization: Bearer [ACCESS_TOKEN]
Request POST params: - grant_type=pin
Response success example:
{ &amp;quot;token_type&amp;quot;: &amp;quot;Bearer&amp;quot;, &amp;quot;expires_in&amp;quot;: 94608000, &amp;quot;access_token&amp;quot;: &amp;quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6Ijk3MTIyMzQyMTM1ZGI1YjA3MDE4MDYzNzhhYTQ3MjRkYjE0ZTVmYzBkODNhODJkZDQ3ZDYyMTU0NDQ5NGVkM2M1MzgyN2IwOWRhZDM2NjExIn0.eyJhdWQiOiJkY2gucm9rdSIsImp0aSI6Ijk3MTIyMzQyMTM1ZGI1YjA3MDE4MDYzNzhhYTQ3MjRkYjE0ZTVmYzBkODNhODJkZDQ3ZDYyMTU0NDQ5NGVkM2M1MzgyN2IwOWRhZDM2NjExIiwiaWF0IjoxNDc4ODY2OTU1LCJuYmYiOjE0Nzg4NjY5NTUsImV4cCI6MTU3MzQ3NDk1NSwic3ViIjoiNjUxOTgzIiwic2NvcGVzIjpbXX0.bbAVvJzMUABUWLoHSoyvKGopJ644_5MZOICSdP_LciSaFSJQ69pQWuonl84CimPpVixqVJjWJsb9jvlfHv-UIME-BOYh0VLmNOMnqMYo6C0liMdToUpE5vCDSsrYurm064R83Zl_rw5IbvX_jSHWCF8Cp0UioPPnVG3v3O9FAHM&amp;quot;, &amp;quot;refresh_token&amp;quot;: &amp;quot;eHuWG4Kgs30QaDAFcWFYxZz/wdc7V/6NhE0RergqZ46fwIj3OI0pAAdoTMhUrfQLfl6+Ak7dvKp0APgRhQLt8x5c02q+IDqf7bPSKMyGJr+8u8thJDvqUcEEn/VKJlP39b9kgy3t6SaWhBnFJ1GivfZLbdsjdSWwIGI1t0FicqWsg59zwz80/LNozoFTPvDbJmaovBF8g2nSpa/h3ogwKrVSE0NUysqZyUv/ly1GyI8sTYDdwPMP/sxZs+c5Ydnr4fGSuXIo8XE8L5dmWDWBRuM11mixD+ovfOjWm6RYYTS/u/j4/EYkwqmKgbUKSQT+aYc92QCSVI+cf4Al+659ZnM7UOF3dFfAOyp4cwdjhGKYnpEttZcZNkjQ/Fn9/smaTdlpBtTWt6rg2IS6JtK2QSp32SDgJDfMdbMjmL2u4BiGSrx5aHCRkjWiXX0B6IKQXRiq+T0W4JxAIaWH5VjB4zDU/+FUtPOrEsjRlWl15dC4OiUcnL9xmx+s1hwoKxgs&amp;quot; }  Error response when user didn&amp;rsquo;t yet enter the PIN on the website:
{ &amp;quot;error&amp;quot;:&amp;quot;invalid_request&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.</description>
    </item>
    
    <item>
      <title>Upgrading an access token</title>
      <link>/backend/api/jsonapi-2-0/connecting-to-the-api/upgrading-an-access-token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/backend/api/jsonapi-2-0/connecting-to-the-api/upgrading-an-access-token/</guid>
      <description>When an app already has an access token from the API 1.x and migrates to using API 2.x, it should exchange its existing token with a JWT issued by the API 2.x.
Endpoint: &amp;gt; /oauth2/token
HTTP request header: &amp;gt; Content-Type : application/x-www-form-urlencoded
Request POST params: - grant_type=exchange_token - app_id=[APP_ID] - app_version=[APP_VERSION] - client_secret=[APP_SECRET] - token=[V1_TOKEN]
Note: Since APIv1 did not verify a clients identity, app_id, app_version and client_secret are mandatory here</description>
    </item>
    
  </channel>
</rss>